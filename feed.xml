<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Hampton Moore</title>
		<description>A techy blog</description>
		<link>https://hampton.pw/</link>
		<atom:link href="https://hampton.pw/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Deploying sites with Gogs and Traefik</title>
				<description>&lt;h4 id=&quot;what-is-gogs&quot;&gt;What is Gogs?&lt;/h4&gt;

&lt;p&gt;Gogs is a super easy to setup and lightweight Gitlab alternative. It has a sleek and nice looking UI, amazing UX, and can be customized however you want. It also supports being run on pretty any platform including Linux, Mac OS X, Windows and ARM.&lt;/p&gt;

&lt;h4 id=&quot;ok-how-about-træfik&quot;&gt;Ok how about Træfik&lt;/h4&gt;
&lt;p&gt;Træfik (pronounced like traffic) is a modern HTTP reverse proxy and load balancer made to deploy microservices with ease. It supports several backends which includes Docker, Kubernetes, and Amazon ECS to manage its configuration automatically and dynamically.&lt;/p&gt;

&lt;h4 id=&quot;the-plan&quot;&gt;The plan&lt;/h4&gt;
&lt;p&gt;I have been wanting to move my blog to be hosted on my server, but I didn’t know how to do it with my current infrastructure. I wanted the site to be a mirror of my Gogs repo. To set this up would required some work because Gogs is run in its own container and the NGINX server to host my site would be in another. So I started looking around then remembered. I store my Gogs data in a folder on my host machine (/var/gogs). This meant that I could run a git checkout on post-receive on my Gogs docker. This would create a folder at /var/gogs/serve/hampton.pw. Next I mounted that folder on the docker-nginx docker container at /var/www. This then would allow for my site to be auto deployed.&lt;/p&gt;

&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;
&lt;p&gt;The post-receive I used was “git –work-tree=/data/serve/hampton.pw/ –git-dir=/data/git/gogs-repositories/herohamp/hampton.pw.git checkout -f” this is run inside my Gogs docker image. Now I started working on docker-compose file. It ended up looking like &lt;a href=&quot;/hampton-pw.docker-compose&quot;&gt;this.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the Traefik labels allows for Traefik to automatically deploy the site for me with https.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;While this does required more work to get setup than github pages, it also supports building and serving php files.&lt;/p&gt;
</description>
				<pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
				<link>https://hampton.pw/2018/06/05/glogs-deploy/</link>
				<guid isPermaLink="true">https://hampton.pw/2018/06/05/glogs-deploy/</guid>
			</item>
		
			<item>
				<title>Ai Recolors New Mexico State Flag</title>
				<description>&lt;p&gt;Before reading this try it out here: &lt;a href=&quot;/tools/new-mexico-ai/&quot; class=&quot;no-barba&quot;&gt;/tools/new-mexico-ai&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;intro&quot;&gt;Intro&lt;/h4&gt;
&lt;p&gt;I’m bad at design, but good at programming. Which means I am very good at design. If your first response to that was “That makes no sense, you just said you are bad” then you are kinda correct. The results were next level, but they were pretty good.&lt;/p&gt;

&lt;h4 id=&quot;backstory&quot;&gt;Backstory&lt;/h4&gt;
&lt;p&gt;I was looking at state flags one day and came to the realization that the New Mexico flag one of the only good looking flags. I only had one issue with it, the coloring. I don’t know what about it I did not like, but I just knew I did not particularly like the color scheme. After a bit of time, I had an idea. Since I don’t know what I like, why not have a computer do it for me.&lt;/p&gt;

&lt;h4 id=&quot;how&quot;&gt;How?&lt;/h4&gt;
&lt;p&gt;It is super simple. First, it generates 2 random colors, then it using some JavaScript Magic renders it onto the user’s screen. Then the user has four choices, Love it, Like it, Meh, and Hate it. It then feeds the Neural Network a value, 1 for Love it all the way to 0 for Hate it. It uses this in the future to find the perfect color scheme. The user then continues to do this for as long as they wish. Once they think it has been long enough it gets tired, then click the dandy “Generate” button. That runs 200 thousand rounds of generating random colors, sending it to the trained and personalized neural network, and save it to an array. After all the simulations finish, it then finds the color scheme with the higher score and displays it to the user.&lt;/p&gt;
</description>
				<pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
				<link>https://hampton.pw/2018/05/22/new-mexico/</link>
				<guid isPermaLink="true">https://hampton.pw/2018/05/22/new-mexico/</guid>
			</item>
		
	</channel>
</rss>
